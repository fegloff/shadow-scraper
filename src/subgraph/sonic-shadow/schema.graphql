type FeeAdjustment @entity(immutable: true) {
  id: Bytes!
  pool: Bytes! # address
  newFee: Int! # uint24
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeCollectorChanged @entity(immutable: true) {
  id: Bytes!
  oldFeeCollector: Bytes! # address
  newFeeCollector: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PoolCreated @entity(immutable: true) {
  id: Bytes!
  token0: Bytes! # address
  token1: Bytes! # address
  fee: Int! # uint24
  tickSpacing: Int! # int24
  pool: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetFeeProtocol @entity(immutable: true) {
  id: Bytes!
  feeProtocolOld: Int! # uint8
  feeProtocolNew: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetPoolFeeProtocol @entity(immutable: true) {
  id: Bytes!
  pool: Bytes! # address
  feeProtocolOld: Int! # uint8
  feeProtocolNew: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TickSpacingEnabled @entity(immutable: true) {
  id: Bytes!
  tickSpacing: Int! # int24
  fee: Int! # uint24
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
